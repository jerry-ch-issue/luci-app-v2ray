/**
 * @license
 * Copyright 2020 Xingwang Liao <kuoruan@gmail.com>
 *
 * Licensed to the public under the MIT License.
 */
"use strict";"require form";"require fs";"require rpc";"require uci";"require ui";"require v2ray";"require tools/widgets as widgets";"require view/v2ray/include/custom as custom";"require view/v2ray/tools/converters as converters";var gfwlistUrls={github:"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt",gitlab:"https://gitlab.com/gfwlist/gfwlist/raw/master/gfwlist.txt",pagure:"https://pagure.io/gfwlist/raw/master/f/gfwlist.txt",bitbucket:"https://bitbucket.org/gfwlist/gfwlist/raw/HEAD/gfwlist.txt"},apnicDelegatedUrls={apnic:"https://ftp.apnic.net/stats/apnic/delegated-apnic-latest",arin:"https://ftp.arin.net/pub/stats/apnic/delegated-apnic-latest",ripe:"https://ftp.ripe.net/pub/stats/apnic/delegated-apnic-latest",iana:"https://ftp.iana.org/pub/mirror/rirstats/apnic/delegated-apnic-latest"};return L.view.extend({handleListUpdate:function(t,e,r){var i=function(){ui.hideModal(),window.location.reload()};switch(r){case"gfwlist":var o=uci.get("v2ray",e,"gfwlist_mirror")||"github",a=gfwlistUrls[o];return fs.exec("/usr/share/v2ray/update_lists.sh",[r,a]).then(L.bind((function(t){0===t.code?ui.showModal(_("List Update"),[E("p",_("GFWList updated.")),E("div",{class:"right"},E("button",{class:"btn",click:i},_("OK")))]):ui.showModal(_("Update Failed"),[E("p","Updated failed with error code:%d".format(t.code)),E("pre",{},t.stderr?t.stderr:""),E("div",{class:"right"},E("button",{class:"btn",click:ui.hideModal},_("OK")))])})),this,t.target).catch((function(){}));case"chnroute":case"chnroute6":var s=uci.get("v2ray",e,"apnic_delegated_mirror")||"apnic";a=apnicDelegatedUrls[s];return fs.exec("/usr/share/v2ray/update_lists.sh",[r,a]).then(L.bind((function(t){0===t.code?ui.showModal(_("List Update"),[E("p",_("China Route Lists updated.")),E("div",{class:"right"},E("button",{class:"btn",click:i},_("OK")))]):ui.showModal(_("Update Failed"),[E("p","Updated failed with error code:%d".format(t.code)),E("pre",{},t.stderr?t.stderr:""),E("div",{class:"right"},E("button",{class:"btn",click:ui.hideModal},_("OK")))])})),this,t.target).catch((function(){}));default:ui.addNotification(null,_("Unexpected error."))}},load:function(){return Promise.all([v2ray.getDokodemoDoorPorts(),v2ray.getCore()])},render:function(t){var e,r=void 0===t?[]:t,i=r[0],o=void 0===i?[]:i,a=r[1],s=void 0===a?"":a,l=new form.Map("v2ray","%s - %s".format(s,_("Transparent Proxy"))),d=l.section(form.NamedSection,"main_transparent_proxy","transparent_proxy");(e=d.option(form.Value,"redirect_port",_("Redirect port"),_("Enable transparent proxy on Dokodemo-door port."))).value("",_("None"));for(var n=0,p=o;n<p.length;n++){var c=p[n];e.value(c.value,c.caption)}return e.datatype="port",(e=d.option(widgets.NetworkSelect,"lan_ifaces",_("LAN interfaces"),_("Enable proxy on selected interfaces."))).multiple=!0,e.nocreate=!0,e.filter=function(t,e){return e.indexOf("wan")<0},e.rmempty=!1,e=d.option(form.Flag,"use_tproxy",_("Use TProxy"),_("Setup redirect rules with TProxy.")),e=d.option(form.Flag,"ipv6_tproxy",_("Proxy IPv6")),e=d.option(form.Flag,"only_privileged_ports",_("Only privileged ports"),_("Only redirect traffic on ports below 1024.")),e=d.option(form.Flag,"redirect_udp",_("Redirect UDP"),"%s %s.".format(_("Redirect UDP traffic to"),s)),(e=d.option(form.Flag,"redirect_dns",_("Redirect DNS"),"%s %s.".format(_("Redirect DNS queries to"),s))).depends("redirect_udp",""),e.depends("redirect_udp","0"),(e=d.option(form.DynamicList,"excluded_tcp_port",_("Excluded TCP Port(s)"),_("Outgoing %s Traffic from the given port(s) will be excluded by Transparent Proxy.").format("TCP"))).datatype="portrange",e.rmempty=!0,(e=d.option(form.DynamicList,"excluded_udp_port",_("Excluded UDP Port(s)"),_("Outgoing %s Traffic from the given port(s) will be excluded by Transparent Proxy.").format("UDP"))).depends("redirect_udp","1"),e.datatype="portrange",e.rmempty=!0,(e=d.option(form.ListValue,"proxy_mode",_("Proxy mode"),"%s %s.".format(_("Apply firewall rules to Pre-filter traffic before sending to"),s))).value("default",_("Global Mode")),e.value("cn_direct",_("CN Direct")),e.value("cn_proxy",_("CN Proxy")),e.value("gfwlist_proxy",_("GFWList Proxy")),(e=d.option(form.ListValue,"apnic_delegated_mirror",_("APNIC delegated mirror"))).value("apnic","APNIC"),e.value("arin","ARIN"),e.value("ripe","RIPE"),e.value("iana","IANA"),(e=d.option(custom.ListStatusValue,"_chnroutelist",_("CHNRoute"))).listtype="chnroute",e.btntitle=_("Update"),e.btnstyle="apply",e.onupdate=L.bind(this.handleListUpdate,this),(e=d.option(form.ListValue,"gfwlist_mirror",_("GFWList mirror"))).value("github","GitHub"),e.value("gitlab","GitLab"),e.value("bitbucket","Bitbucket"),e.value("pagure","Pagure"),(e=d.option(custom.ListStatusValue,"_gfwlist",_("GFWList"))).listtype="gfwlist",e.btntitle=_("Update"),e.btnstyle="apply",e.onupdate=L.bind(this.handleListUpdate,this),(e=d.option(custom.TextValue,"_proxy_list",_("Extra proxy list"),_("One address per line. Allow types: DOMAIN, IP, CIDR. eg: %s, %s, %s").format("www.google.com","1.1.1.1","192.168.0.0/16"))).wrap="off",e.rows=5,e.datatype="string",e.filepath="/etc/v2ray/proxylist.txt",(e=d.option(custom.TextValue,"_direct_list",_("Extra direct list"),_("One address per line. Allow types: DOMAIN, IP, CIDR. eg: %s, %s, %s").format("www.google.com","1.1.1.1","192.168.0.0/16"))).wrap="off",e.rows=5,e.datatype="string",e.filepath="/etc/v2ray/directlist.txt",e=d.option(form.Value,"proxy_list_dns",_("Proxy list DNS"),_("DNS used for domains in proxy list, format: <code>ip#port</code>. eg: %s").format("1.1.1.1#53")),e=d.option(form.Value,"direct_list_dns",_("Direct list DNS"),_("DNS used for domains in direct list, format: <code>ip#port</code>. eg: %s").format("114.114.114.114#53")),(e=d.option(custom.TextValue,"_src_direct_list",_("Local devices direct outbound list"),_("One address per line. Allow types: IP, CIDR. eg: %s, %s").format("192.168.0.19","192.168.0.0/16"))).wrap="off",e.rows=3,e.datatype="string",e.filepath="/etc/v2ray/srcdirectlist.txt",l.render()}});